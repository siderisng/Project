#include <stdio.h>
#include <string.h>
#include <pthread.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>

#define trainCap 10

void startTrain();
void getOff();
void TrainReturn();

void * Passenger();


int timesToRun, passLeft,noBoard, capacity, flag;
pthread_mutex_t entry, board, end, ready, ride;




int main (int argc, char* argv[]){
	int i, noPass, thrCheck;
	pthread_t *pasThread;
	
	noBoard=0;
	flag=0;
	printf ("How many passengers? ");
	scanf (" %d", &noPass);
	printf ("\n");
	
	timesToRun= noPass/trainCap;
	passLeft= noPass%trainCap;
	capacity= trainCap;
	
	if (pthread_mutex_init(&end, NULL) != 0)
    {
        perror ("Mutex error");
        return 1;
    }
	
	pthread_mutex_lock (&end);
	
	if (pthread_mutex_init(&ready, NULL) != 0)
    {
        perror ("Mutex error");
        return 1;
    }
	
	pthread_mutex_lock (&ready);
	
	if (pthread_mutex_init(&ride, NULL) != 0)
    {
        perror ("Mutex error");
        return 1;
    }
	pthread_mutex_lock (&ride);
	
	if (pthread_mutex_init(&entry, NULL) != 0)
    {
        perror ("Mutex error");
        return 1;
    }
	
	
	if (pthread_mutex_init(&board, NULL) != 0)
    {
        perror ("Mutex error");
        return 1;
    }
	pthread_mutex_lock (&board);
	
	
	if (NULL==(pasThread= (pthread_t*)malloc(sizeof(pthread_t)*noPass))){
		perror ("Memory allocation error!!!");
		return (1);
		
	}
	
	
	for (i=0; i<noPass; i++){
		
		thrCheck = pthread_create( &pasThread[i], NULL, Passenger , NULL);
		if(thrCheck){
			fprintf(stderr,"Error - pthread_create() return code: %d\n",thrCheck);
			exit(EXIT_FAILURE);
		}
		
		
	}
	pthread_mutex_lock (&end);
	pthread_mutex_destroy (&end);
	pthread_mutex_destroy (&entry);
	pthread_mutex_destroy (&board);
	pthread_mutex_destroy (&ready);
	pthread_mutex_destroy (&ride);
	
	free (pasThread);
	return (0);
	
}


void startTrain(){
	
	noBoard--;
	
	printf ("YOOOOOHOOOOOOO\n");
}
void getOff(){
	static int i=0;
	if (i==0){
		printf ("End of the ride!!!!\n");
	}
	printf ("It Was Great!!!\n");
	i= (i+1)%capacity;
	if (i==0){
		flag=1;
	}
}


void TrainReturn(){
	int i;
	
	if (timesToRun!=0){
	printf ("Returning back\n");
	for (i=0;i<3; i++){
		printf (".\n");
		sleep (1);
	}
	printf ("Waiting for Passengers\n");}
	else {
		printf ("Nothing else to do let's go drinking\n");
		pthread_mutex_unlock (&end);
		
	}
}

void *Passenger(){
	
	pthread_mutex_lock (&entry);
	noBoard++;
	
	
	
	if (noBoard!=capacity){
		pthread_mutex_unlock (&entry);
	}else {
		pthread_mutex_unlock(&board);
	}
	
	pthread_mutex_lock(&board);
	if (noBoard==capacity){
		printf ("Train Starts\n");
	}
	
	startTrain();
	if (noBoard!=0){
		pthread_mutex_unlock (&board);
	}
	
	
	if (noBoard==0){
		
		pthread_mutex_unlock (&ride);	
	}
	
	
	pthread_mutex_lock (&ride);
	
	
	
	getOff();
	
	
	if ((noBoard==0)&&(flag==1)){
		flag=0;
		printf ("Train returns\n");
		TrainReturn();
		pthread_mutex_unlock (&entry);	
		timesToRun--;
		
		if ((timesToRun==0)&&(passLeft!=0)){
			capacity=passLeft;		
			pthread_mutex_unlock (&entry);	
		}
		else if ((timesToRun==0)&&(passLeft==0)){
			printf ("Nothing else to do let's go drinking\n");
			pthread_mutex_unlock(&end);
		}else{
			pthread_mutex_unlock (&entry);	
		}
	}
	else if (flag==0){
		pthread_mutex_unlock (&ride);
	}
	
	
	return (NULL);
	
}



